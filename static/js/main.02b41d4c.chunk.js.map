{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["experiences","title","subtitle","timeRange","body","tags","color","projects","link","App","h","placeItems","className","p","w","minW","rounded","boxShadow","bg","spacing","isExternal","href","src","ml","fontWeight","fontSize","map","experience","borderLeftColor","borderLeftWidth","px","align","size","mt","pt","isInline","tag","opacity","variant","colorScheme","templateColumns","gap","project","colSpan","borderWidth","direction","noOfLines","flex","rowSpan","as","RiGithubFill","textAlign","IoIosMail","justify","RiTwitterFill","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","colors","gray","50","100","200","300","400","500","600","700","800","900","teal","theme","extendTheme","fonts","heading","styles","global","background","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.02b41d4c.chunk.js","sourcesContent":["import {\n  Link,\n  Flex,\n  Box,\n  Heading,\n  Avatar,\n  Text,\n  Badge,\n  Divider,\n  Stack,\n  Grid,\n  GridItem,\n  Icon,\n} from \"@chakra-ui/react\";\nimport { RiGithubFill, RiMediumFill, RiTwitterFill } from \"react-icons/ri\";\nimport { IoIosMail } from \"react-icons/io\";\nimport \"./App.css\";\n\nconst experiences = [\n  {\n    title: \"Diode\",\n    subtitle: \"Founding Engineer\",\n    timeRange: \"2021-2022\",\n    body: `Built web-based 3D hardware simulator capable of simulating analog circuits and microcontrollers.`,\n    tags: [\"TypeScript\", \"Next.js\", \"Supabase\", \"Chakra-UI\"],\n    color: \"teal\",\n  },\n  {\n    title: \"Target\",\n    subtitle: \"Senior Software Engineer\",\n    timeRange: \"2017 - 2021\",\n    body: `Worked on several UI's and API's across merchandise, supply chain, and dev-ops.`,\n    tags: [\"TypeScript\", \"React\", \"Angular\", \"Node\", \"Docker\"],\n    color: \"red\",\n  },\n  {\n    title: \"Rochester Institute of Technology\",\n    subtitle: \"BS in Computer Science - 3.95 GPA\",\n    timeRange: \"2012 - 2017\",\n    body: `Studied Computer Science at RIT in Rochester, NY. Completed 4 years of study and 1 year of internships.\n  Interned with Paychex as a Java Developer, Epic as a Data Scientist, and Target as a Software Engineer.\n  `,\n    tags: [\"JavaScript\", \"Python\", \"Java\", \"C\", \"Django\"],\n    color: \"orange\",\n  },\n];\n\nconst projects = [\n  {\n    title: \"Scrollex\",\n    timeRange: \"2022\",\n    body: `I published a library that lets devs build scroll experiences declaratively.`,\n    tags: [\"TypeScript\", \"framer-motion\"],\n    color: \"blue\",\n    link: \"https://github.com/malerba118/scrollex\",\n  },\n  {\n    title: \"Elementos\",\n    timeRange: \"2020\",\n    body: `I published a framework-agnostic, reactive state management library.`,\n    tags: [\"TypeScript\", \"npm\"],\n    color: \"blue\",\n    link: \"https://malerba118.github.io/elementos-docs/\",\n  },\n  {\n    title: \"Snowbox\",\n    timeRange: \"2020\",\n    body: `I built a CodeSandbox clone for internal use at Target.\n  `,\n    tags: [\"Chakra-UI\", \"React\", \"Mongo\", \"Snowpack\"],\n    color: \"blue\",\n    link: \"https://drive.google.com/file/d/1li65WH-6ZmBRtGVtgz2-eIjkjoLS7F4j/view?usp=sharing\",\n  },\n  {\n    title: \"react-particle-image\",\n    timeRange: \"2020\",\n    body: `I published a component that renders images as interactive particles.\n  `,\n    tags: [\"TypeScript\", \"React\", \"npm\"],\n    color: \"blue\",\n    link: \"https://github.com/malerba118/react-particle-image\",\n  },\n  {\n    title: \"Iconik Studio\",\n    timeRange: \"2018\",\n    body: `I built an svg editor via ionic-angular for iOS/Android.\n  `,\n    tags: [\"ionic\", \"Angular\", \"fabricjs\", \"PouchDB\"],\n    color: \"blue\",\n    link: \"https://drive.google.com/file/d/1D2UOPYsPDcutjtIlckQrJJBv7H7uchOm/view?usp=sharing\",\n  },\n  {\n    title: \"Blog\",\n    timeRange: \"2017 - 2020\",\n    body: `I write tech articles for freeCodeCamp, HackerNoon, and Better Programming.\n  `,\n    tags: [\"JavaScript\", \"React\"],\n    color: \"blue\",\n    link: \"https://austinmalerba.medium.com/\",\n  },\n];\n\nfunction App() {\n  return (\n    <Grid h=\"100%\" placeItems=\"center\">\n      <Grid className=\"paper-container\" p=\"1in\" placeItems=\"center\">\n        <Box\n          className=\"paper\"\n          w=\"8.5in\"\n          minW=\"8.5in\"\n          h=\"11in\"\n          p=\".75in\"\n          rounded=\"md\"\n          boxShadow=\"lg\"\n          bg=\"white\"\n        >\n          <Stack spacing=\"5\">\n            <Flex>\n              <Link isExternal href=\"https://malerba118.github.io/resume/\">\n                <Avatar src=\"me2.JPG\" />\n              </Link>\n              <Box ml=\"3\">\n                <Text fontWeight=\"bold\">Austin Malerba</Text>\n                <Text fontSize=\"sm\" fontWeight=\"500\" color=\"gray.600\">\n                  Web Developer - USA - Mountain Time\n                </Text>\n              </Box>\n            </Flex>\n            <Divider />\n            {experiences.map((experience) => (\n              <Stack\n                key={experience.title}\n                borderLeftColor={`${experience.color}.300`}\n                borderLeftWidth=\"4px\"\n                px=\"2\"\n                spacing={1}\n              >\n                <Box>\n                  <Flex align=\"center\">\n                    <Text size=\"sm\" fontWeight=\"bold\">\n                      {experience.title}\n                    </Text>\n                    <Text\n                      fontSize=\"xs\"\n                      fontWeight=\"600\"\n                      color=\"gray.600\"\n                      ml=\"2\"\n                      mt=\"0.1rem\"\n                    >\n                      ({experience.timeRange})\n                    </Text>\n                  </Flex>\n                  <Text fontSize=\"sm\" fontWeight=\"500\" color=\"gray.600\">\n                    {experience.subtitle}\n                  </Text>\n                </Box>\n                <Text fontSize=\"xs\" fontWeight=\"400\" color=\"gray.900\">\n                  {experience.body}\n                </Text>\n                <Stack pt={1} isInline>\n                  {experience.tags.map((tag) => (\n                    <Badge\n                      opacity={0.75}\n                      fontSize=\".66rem\"\n                      variant=\"outline\"\n                      key={tag}\n                      colorScheme={experience.color}\n                    >\n                      {tag}\n                    </Badge>\n                  ))}\n                </Stack>\n              </Stack>\n            ))}\n            <Text fontSize=\"xl\" fontWeight=\"bold\">\n              Projects\n            </Text>\n            <Grid templateColumns=\"repeat(2, 1fr)\" gap={4}>\n              {projects.map((project) => (\n                <GridItem h=\"1.25in\" colSpan={1} borderWidth={1} rounded=\"md\">\n                  <Flex direction=\"column\" key={project.title} p={4} h=\"100%\">\n                    <Box>\n                      <Text size=\"sm\" fontWeight=\"bold\">\n                        <Link color=\"blue.500\" isExternal href={project.link}>\n                          {project.title}\n                        </Link>\n                      </Text>\n                    </Box>\n                    <Text\n                      noOfLines={2}\n                      flex={1}\n                      fontSize=\"xs\"\n                      fontWeight=\"400\"\n                      color=\"gray.900\"\n                    >\n                      {project.body}\n                    </Text>\n                    <Stack isInline>\n                      {project.tags.map((tag) => (\n                        <Badge\n                          opacity={0.75}\n                          fontSize=\".66rem\"\n                          variant=\"outline\"\n                          key={tag}\n                          colorScheme={\"blue\"}\n                        >\n                          {tag}\n                        </Badge>\n                      ))}\n                    </Stack>\n                  </Flex>\n                </GridItem>\n              ))}\n            </Grid>\n            <GridItem rowSpan=\"auto\" />\n            <Grid templateColumns=\"repeat(3, 1fr)\" gap={4}>\n              <Stack spacing=\"1\" isInline>\n                <Icon fontSize=\"lg\" as={RiGithubFill} />\n                <Text fontSize=\"xs\" fontWeight=\"600\" color=\"gray.600\">\n                  <Link isExternal href=\"https://github.com/malerba118\">\n                    malerba118\n                  </Link>\n                </Text>\n              </Stack>\n              <Stack spacing=\"1\" isInline textAlign=\"center\">\n                <Icon fontSize=\"lg\" as={IoIosMail} />\n                <Text fontSize=\"xs\" fontWeight=\"600\" color=\"gray.600\">\n                  austin.malerba@gmail.com\n                </Text>\n              </Stack>\n              <Stack spacing=\"1\" isInline justify=\"flex-end\">\n                <Icon fontSize=\"lg\" as={RiTwitterFill} />\n                <Text fontSize=\"xs\" fontWeight=\"600\" color=\"gray.600\">\n                  <Link isExternal href=\"https://twitter.com/austin_malerba\">\n                    Twitter\n                  </Link>\n                </Text>\n              </Stack>\n            </Grid>\n          </Stack>\n        </Box>\n      </Grid>\n    </Grid>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\nimport { ChakraProvider, extendTheme } from \"@chakra-ui/react\";\n\nexport const colors = {\n  gray: {\n    50: \"#f8fafc\",\n    100: \"#f1f5f9\",\n    200: \"#e2e8f0\",\n    300: \"#cbd5e1\",\n    400: \"#94a3b8\",\n    500: \"#64748b\",\n    600: \"#475569\",\n    700: \"#334155\",\n    800: \"#1e293b\",\n    900: \"#0f172a\",\n  },\n  teal: {\n    50: \"#ddfeff\",\n    100: \"#b5f7fa\",\n    200: \"#8af0f4\",\n    300: \"#5fe9ef\",\n    400: \"#3ce2eb\",\n    500: \"#29c9d1\",\n    600: \"#1a9da4\",\n    700: \"#0b7075\",\n    800: \"#004347\",\n    900: \"#001819\",\n  },\n};\n\nconst theme = extendTheme({\n  // colors,\n  fonts: {\n    heading: \"Poppins\",\n    body: \"Poppins\",\n  },\n  styles: {\n    global: {\n      \"html, body\": {\n        background: \"gray.100\",\n      },\n    },\n  },\n});\n\nReactDOM.render(\n  <React.StrictMode>\n    <ChakraProvider theme={theme}>\n      <App />\n    </ChakraProvider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}